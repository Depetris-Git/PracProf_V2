@page "/lista-alumnos"
@using WebITSC.Shared.General.DTO.Alumnos
@inject HttpClient http
@inject NavigationManager Navigation

<h3>Lista de Alumnos</h3>

<!-- Filtro de búsqueda -->
<div class="form-group">
    <label for="search">Buscar</label>
    <InputText class="form-control" id="search" @bind-Value="searchTerm" placeholder="Buscar por nombre, apellido, documento, etc..." />
</div>

<!-- Tabla de Alumnos -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Carrera</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Documento</th>
            <th>Cohorte</th>
            <th>CUIL</th>
            <th>País</th>
            <th>Provincia</th>
            <th>Departamento</th>
            <th>Título Base</th>
            <th>Fotocopia DNI</th>
            <th>Constancia CUIL</th>
            <th>Partida de Nacimiento</th>
            <th>Analítico</th>
            <th>Foto Carnet</th>
            <th>CUS</th>
            <th>Estado</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var alumno in FilteredAlumnos)
        {
            <tr>
                <td>@alumno.NameCarrera</td>
                <td>@alumno.NombrePersona</td>
                <td>@alumno.ApellidoPersona</td>
                <td>@alumno.DocumentoPersona</td>
                <td>@(alumno.Cohorte != 0 ? alumno.Cohorte.ToString() : DateTime.Now.Year.ToString())</td>
                <td>@alumno.CUIL</td>
                <td>@alumno.Pais</td>
                <td>@alumno.Provincia</td>
                <td>@alumno.Departamento</td>
                <td>@alumno.TituloBase</td>
                <td>@alumno.FotocopiaDNI</td>
                <td>@alumno.ConstanciaCUIL</td>
                <td>@alumno.PartidaNacimiento</td>
                <td>@alumno.Analitico</td>
                <td>@alumno.FotoCarnet</td>
                <td>@alumno.CUS</td>
                <td>@(alumno.Estado ? "Activo" : "Inactivo")</td>
             
            </tr>
        }
    </tbody>
</table>

@code {
    private List<GetAlumnoDTO> alumnos = new List<GetAlumnoDTO>();
    private string searchTerm = string.Empty;

    // Propiedad calculada para obtener los alumnos filtrados
    private IEnumerable<GetAlumnoDTO> FilteredAlumnos
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
                return alumnos;

            return alumnos.Where(a =>
                a.NombrePersona.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.ApellidoPersona.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.DocumentoPersona.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) 
                //por cohorteee
            );
        }
    }

    // Este método se ejecuta al cargar la página
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener la lista de alumnos del API
            alumnos = await http.GetFromJsonAsync<List<GetAlumnoDTO>>("api/Alumnos");

            // Si no obtenemos datos, asignamos una lista vacía
            if (alumnos == null)
            {
                alumnos = new List<GetAlumnoDTO>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener los alumnos: {ex.Message}");
        }
    }
}







   
