@page "/Alumnos"
@inject IHttpServicios http

<PageTitle>Alumnos</PageTitle>

<h1>Alumnos</h1>

<p>BUSCAR ALUMNOS</p>

<div>
    <input @bind="nombre" placeholder="Nombre" />
    <input @bind="apellido" placeholder="Apellido" />
    <input @bind="documento" placeholder="Documento" />
    <input @bind="cohorte" type="number" placeholder="Cohorte" />
    <button @onclick="BuscarAlumnos">Buscar</button>
</div>


<table>
    @if (Mensaje == "")
    {
        @if (alumnos == null)
        {
            <p>Buscando....</p>
        }
        else if( alumnos.Count == 0)
        {
            <p>No existen tipos de documentos</p>
        }
        else
        {
            @foreach (var alumno in alumnos )
            {
                <tr>
                    <td>@alumno?.Usuario?.Persona?.Nombre</td>
                    <td>@alumno?.Usuario?.Persona?.Apellido</td>
                    <td>@alumno?.Usuario?.Persona?.Documento</td>
                    <td>@alumno?.InscripcionesCarreras?.FirstOrDefault()?.Cohorte</td>
                </tr>
            }
        }
    }
    else
    {
        <p> Error: @Mensaje</p>
    }
</table>



@code {
    string? nombre;
    string? apellido;
    string? documento;
    int? cohorte;
    List<Alumno>? alumnos = new List<Alumno>();
    Alumno alumno = new Alumno();
    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await BuscarAlumnos();
    }


        private async Task BuscarAlumnos()
        {


        var resp = await http.Get<List<Alumno>>("/api/Alumnos/buscar");
        if (!resp.Error)
        {
           alumnos  = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
        }
}




   
