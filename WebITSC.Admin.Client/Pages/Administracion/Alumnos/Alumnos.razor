@page "/Administracion/CargaAlumnos"
@inject IHttpServicios http
@inject HttpClient _http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using WebITSC.Shared.General.DTO.Carreraa
@using WebITSC.Shared.General.DTO.Alumnos
@using WebITSC.Shared.General.DTO.PaisesDTO
@using WebITSC.Shared.General.DTO.ProvinciaDptoLocal

<h3>Alumnos</h3>

<EditForm Model="crearAlumno" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <b>
    <div class="form-group">
        <label for="CarreraId">Carrera</label>
        <InputSelect class="form-control" id="CarreraId" @bind-Value="crearAlumno.CarreraId">
            <option value="">Seleccione...</option>
            @foreach (var carrera in carreras)
            {
                <option value="@carrera.Id">@carrera.Nombre</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="PaisId">País</label>
        <InputSelect class="form-control" id="PaisId"
                     ValueExpression="@(() => crearAlumno.PaisId)"
                     ValueChanged="@((int PaisId) => ActualizarProvincias(PaisId))">
            <option value="">Seleccione...</option>
            @foreach (var pais in paises)
            {
                <option value="@pais.Id">@pais.Nombre</option>
            }
        </InputSelect>
    </div>


    <div class="form-group">
        <label for="ProvinciaId">Provincia</label>
        <InputSelect class="form-control" id="ProvinciaId"
        ValueExpression="@(() => crearAlumno.ProvinciaId)"
        ValueChanged="@((int ProvinciaId) => ActualizarDepartamentos(ProvinciaId))">
            <option value="">Seleccione...</option>
            @foreach (var prov in provincia)
            {
                <option value="@prov.Id">@prov.Nombre</option>
            }
        </InputSelect>
    </div>

 

    <div class="form-group">
        <label for="LocalidadId">Localidad</label>
        <InputSelect class="form-control" id="LocalidadId" @bind-Value="crearAlumno.LocalidadId">
            <option value="">Seleccione...</option>
            @foreach (var local in localidad)
            {
                <option value="@local.Id">@local.Nombre</option>
            }
        </InputSelect>
    </div>
    </b>

    <button type="submit" class="btn btn-primary">Crear Alumno</button>
</EditForm>

@code {
    private CrearAlumnoDTO crearAlumno = new CrearAlumnoDTO();
    private List<TipoDocumento> tiposDocumentos = new List<TipoDocumento>();
    private List<Pais> paises = new List<Pais>();
    private List<Provincia> provincia = new List<Provincia>();
    private List<Departamento> departamento = new List<Departamento>();
    private List<Localidad> localidad = new List<Localidad>();
    private List<Carrera> carreras = new List<Carrera>();

    // Este método se ejecuta al cargar la página
    protected override async Task OnInitializedAsync()
    {
        tiposDocumentos = await _http.GetFromJsonAsync<List<TipoDocumento>>("api/TipoDocumento");
        carreras = await _http.GetFromJsonAsync<List<Carrera>>("api/Carreras");
        paises = await http.SelectPaisesAsync();

    }

    // Actualiza las provincias cuando se selecciona un país
    private async Task ActualizarProvincias(int PaisId)
    {
        Console.WriteLine($"Pais seleccionado: {PaisId}");
        Console.WriteLine($"Consultando provincias para el país ID: {PaisId}");

        // Llama a la API para obtener las provincias correspondientes al país seleccionado
        provincia = await http.SelectProvinciasPorPaisAsync(PaisId);

        // Forzar la actualización de la interfaz
        StateHasChanged();

        if (provincia == null || !provincia.Any())
        {
            Console.WriteLine("No se encontraron provincias.");
        }
        else
        {
            Console.WriteLine($"Se cargaron {provincia.Count} provincias.");
        }
    }


   // Actualiza los departamentos cuando se selecciona una provincia
    private async Task ActualizarDepartamentos(int provinciaId)
    {
        Console.WriteLine($"Consultando departamentos para la provincia ID: {provinciaId}");

        // Llama a la API para obtener los departamentos correspondientes a la provincia seleccionada
        departamento = await http.SelectDepartamentosPorProvinciaAsync(provinciaId);

        if (departamento == null || !departamento.Any())
        {
            Console.WriteLine("No se encontraron departamentos.");
        }
        else
        {
            Console.WriteLine($"Se cargaron {departamento.Count} departamentos.");
        }
    }

    // // Actualiza las localidades cuando se selecciona un departamento
    // private async Task ActualizarLocalidades(int departamentoId)
    // {
    //     Console.WriteLine($"Consultando localidades para el departamento ID: {departamentoId}");

    //     // Llama a la API para obtener las localidades correspondientes al departamento seleccionado
    //     localidad = await http.SelectLocalidadesPorDepartamentoAsync(departamentoId);

    //     if (localidad == null || !localidad.Any())
    //     {
    //         Console.WriteLine("No se encontraron localidades.");
    //     }
    //     else
    //     {
    //         Console.WriteLine($"Se cargaron {localidad.Count} localidades.");
    //     }
    // }

    // Este método se ejecuta cuando el formulario es enviado y válido
    private async Task HandleValidSubmit()
    {
        try
        {
            // Enviar datos al backend para crear el alumno
            var response = await _http.PostAsJsonAsync("api/Alumnos", crearAlumno);

            if (response.IsSuccessStatusCode)
            {
                // Redirigir a la lista de alumnos o a una página de éxito
                Navigation.NavigateTo("/Administracion/ListaAlumnos");
            }
            else
            {
                // Manejar el error, por ejemplo, mostrar un mensaje de error
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Manejar el error de conexión o cualquier otra excepción
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }
}

