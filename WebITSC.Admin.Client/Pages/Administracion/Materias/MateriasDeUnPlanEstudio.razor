@page "/MateriasPlanEstudio"
@inject IHttpServicios http
@inject HttpClient http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using WebITSC.Shared.General.DTO
@using WebITSC.Shared.General.DTO.Carreraa
<h3>Materias en un Plan de Estudio</h3>

<EditForm Model="@searchParams" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-md-8">
            <label for="Carrera">Carrera</label>
            <InputSelect class="form-control" id="Carrera" @bind-Value="searchParams.NombreCarrera">
                <option value="">Seleccione...</option>
                @foreach (var carrera in carreras)
                {
                    <option value="@carrera.Nombre">@carrera.Nombre</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-4">
            <label for="Anno">Año del Plan de Estudio</label>
            <InputNumber class="form-control" id="Anno" @bind-Value="searchParams.Anno" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Buscar Materias</button>
        </div>
    </div>
</EditForm>

@if (materiasPlanEstudio != null && materiasPlanEstudio.Any())
{
    <h4 class="mt-4">Materias Encontradas</h4>
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Nombre de la Materia</th>
                <th>Año del Plan</th>
                <th>Año</th>
                <th>Horas Reloj Anuales</th>
                <th>Horas Cátedra Semanales</th>
                <th>Anual/Cuatrimestral</th>
                <th>Número de Orden</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var materia in materiasPlanEstudio)
            {
                <tr>
                    <td>@materia.NombreMateria</td>
                    <td>@materia.AnnoPlanEstudio</td>
                    <td>@materia.Anno</td>
                    <td>@materia.HrsRelojAnuales</td>
                    <td>@materia.HrsCatedraSemanales</td>
                    <td>@materia.Anual_Cuatrimestral</td>
                    <td>@(materia.NumeroOrden.HasValue ? materia.NumeroOrden.ToString() : "-")</td>
                </tr>
            }
        </tbody>
    </table>
}
else if (materiasPlanEstudio != null)
{
    <p class="mt-4">No se encontraron resultados.</p>
}
@code {
    private MateriaEnPlanSearchDTO searchParams = new();
    private List<CarreraSearchDTO> carreras = new();
    private List<TraerMateriaEnPlanDTO> materiasPlanEstudio;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        var respuesta = await http.GetFromJsonAsync<List<GetCarreraDTO>>("api/carreras");
        if (respuesta.Count != 0)
        {
            carreras = respuesta.Select(c => new CarreraSearchDTO
                {
                    Id = c.Id,
                    Nombre = c.Nombre
                }).ToList();
        }
    }

    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSumit iniciado");
        try
        {
            var url = $"api/MateriaEnPlanEstudio/GetListByPlan?Carrera={searchParams.NombreCarrera}&Anno={searchParams.Anno}";

            var res = await http.GetFromJsonAsync<List<TraerMateriaEnPlanDTO>>(url);

            if (res != null)
            {
                materiasPlanEstudio = res;
                Console.WriteLine($"Materias encontradas: {materiasPlanEstudio.Count}");
            }
            else
            {
                Console.WriteLine("No se encontraron materias.");
                materiasPlanEstudio = new List<TraerMateriaEnPlanDTO>();
            }

        }
        catch (Exception ex)
        {
            // Manejar el error de conexión o cualquier otra excepción
            Console.WriteLine($"Error al obtener materias: {ex.Message}");
            materiasPlanEstudio = new List<TraerMateriaEnPlanDTO>();
        }
        StateHasChanged();
    }
}
